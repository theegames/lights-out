{"ast":null,"code":"import _slicedToArray from \"/Users/mithilproof/Oleic/github/lights-out/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/mithilproof/Oleic/github/lights-out/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mithilproof/Oleic/github/lights-out/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mithilproof/Oleic/github/lights-out/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mithilproof/Oleic/github/lights-out/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mithilproof/Oleic/github/lights-out/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mithilproof/Oleic/github/lights-out/src/Board.js\";\nimport React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split('-').map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n\n\n      flipCell(y, x); //Flip initial cell\n\n      flipCell(y, x - 1); //flip left\n\n      flipCell(y, x + 1); //flip right\n\n      flipCell(y - 1, x); //flip below\n\n      flipCell(y + 1, x); //flip above\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var hasWon = board.every(function (row) {\n        return row.every(function (cell) {\n          return !cell;\n        });\n      });\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"makeTable\",\n    value: function makeTable() {\n      var _this2 = this;\n\n      var tblBoard = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        var _loop = function _loop(x) {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push(React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[y][x],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(coord);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            },\n            __self: this\n          }));\n        };\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          _loop(x);\n        }\n\n        tblBoard.push(React.createElement(\"tr\", {\n          key: y,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, row));\n      }\n\n      return React.createElement(\"table\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, tblBoard));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, this.state.hasWon ? React.createElement(\"div\", {\n        className: \"winner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"neon-orange\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"YOU\"), React.createElement(\"span\", {\n        className: \"neon-blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"WIN!\")) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Board-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"neon-orange\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Lights\"), React.createElement(\"div\", {\n        className: \"neon-blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Out\")), this.makeTable()));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/Users/mithilproof/Oleic/github/lights-out/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","every","cell","setState","tblBoard","flipCellsAround","makeTable","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\tstatic defaultProps = {\n\t\tnrows: 5,\n\t\tncols: 5,\n\t\tchanceLightStartsOn: 0.25\n\t};\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t// TODO: set initial state\n\t\tthis.state = {\n\t\t\thasWon: false,\n\t\t\tboard: this.createBoard()\n\t\t};\n\t}\n\n\t/** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\tcreateBoard() {\n\t\tlet board = [];\n\t\t// TODO: create array-of-arrays of true/false values\n\t\tfor (let y = 0; y < this.props.nrows; y++) {\n\t\t\tlet row = [];\n\t\t\tfor (let x = 0; x < this.props.ncols; x++) {\n\t\t\t\trow.push(Math.random() < this.props.chanceLightStartsOn);\n\t\t\t}\n\t\t\tboard.push(row);\n\t\t}\n\t\treturn board;\n\t}\n\n\t/** handle changing a cell: update board & determine if winner */\n\n\tflipCellsAround(coord) {\n\t\tlet { ncols, nrows } = this.props;\n\t\tlet board = this.state.board;\n\t\tlet [y, x] = coord.split('-').map(Number);\n\n\t\tfunction flipCell(y, x) {\n\t\t\t// if this coord is actually on board, flip it\n\n\t\t\tif (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n\t\t\t\tboard[y][x] = !board[y][x];\n\t\t\t}\n\t\t}\n\t\t// TODO: flip this cell and the cells around it\n\t\tflipCell(y, x); //Flip initial cell\n\t\tflipCell(y, x - 1); //flip left\n\t\tflipCell(y, x + 1); //flip right\n\t\tflipCell(y - 1, x); //flip below\n\t\tflipCell(y + 1, x); //flip above\n\n\t\t// win when every cell is turned off\n\t\t// TODO: determine is the game has been won\n\t\tlet hasWon = board.every(row => row.every(cell => !cell));\n\n\t\tthis.setState({ board: board, hasWon: hasWon });\n\t}\n\n\t/** Render game board or winning message. */\n\tmakeTable() {\n\t\tlet tblBoard = [];\n\t\tfor (let y = 0; y < this.props.nrows; y++) {\n\t\t\tlet row = [];\n\t\t\tfor (let x = 0; x < this.props.ncols; x++) {\n\t\t\t\tlet coord = `${y}-${x}`;\n\t\t\t\trow.push(\n\t\t\t\t\t<Cell\n\t\t\t\t\t\tkey={coord}\n\t\t\t\t\t\tisLit={this.state.board[y][x]}\n\t\t\t\t\t\tflipCellsAroundMe={() => this.flipCellsAround(coord)}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t\ttblBoard.push(<tr key={y}>{row}</tr>);\n\t\t}\n\t\treturn (\n\t\t\t<table className='Board'>\n\t\t\t\t<tbody>{tblBoard}</tbody>\n\t\t\t</table>\n\t\t);\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{this.state.hasWon ? (\n\t\t\t\t\t<div className='winner'>\n\t\t\t\t\t\t<span className='neon-orange'>YOU</span>\n\t\t\t\t\t\t<span className='neon-blue'>WIN!</span>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div className='Board-title'>\n\t\t\t\t\t\t\t<div className='neon-orange'>Lights</div>\n\t\t\t\t\t\t\t<div className='neon-blue'>Out</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{this.makeTable()}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}